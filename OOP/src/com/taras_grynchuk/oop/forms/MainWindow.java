/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.taras_grynchuk.oop.forms;

import com.taras_grynchuk.oop.*;
import static com.taras_grynchuk.oop.files.SerializableFiles.*;
import static com.taras_grynchuk.oop.files.TextFile.*;
import java.awt.*;
import java.awt.Frame;
import java.io.File;
import java.io.FileFilter;
import java.util.*;
import static java.util.Locale.filter;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.*;

/**
 *
 * @author Taras
 */
public class MainWindow extends javax.swing.JFrame implements TableModelListener {
        private MyTableModel myTableModel;

    @Override
    public void tableChanged(TableModelEvent e) {
    }

        class MyTableModel extends AbstractTableModel {
		private final String[] colNames = {"№", "Артикул" ,"Марка", "Колiр", "Цiна, грн.", "Потужнiсть, к.с."};
                
                @Override
		public String getColumnName(int col) {
                    return colNames[col];
		}
                @Override
		public boolean isCellEditable(int row, int col) {
                    return col > 1;
		}
		
                private ListOfCars myData;
		
		public MyTableModel() {
                    try {
                        myData = openFromSerFile();
                    } catch(Exception e) {
                        myData = new ListOfCars();
                        myData.add(new Car());
                    }
		}
		
                @Override
		public int getColumnCount() {
                    return colNames.length;
		}

                @Override
		public int getRowCount() {
                    return myData.size();
		}

                @Override
		public Object getValueAt(int row, int col) {
                    switch(col) {
			case 0: return row + 1;
                        case 1: return myData.get(row).getArticle();
			case 2: return myData.get(row).getModel();
                        case 3: return myData.get(row).getColor();    
			case 4: return myData.get(row).getPrice();
			case 5: return myData.get(row).getPower();
			default : return "";
                    }
		}
		
                @Override
		public void setValueAt(Object value, int row, int col){
                    switch(col) {
                        case 2: myData.get(row).setModel(value.toString()); break;
                        case 3: myData.get(row).setColor(value.toString()); break;
                        case 4:
                            try {
                                myData.get(row).setPrice(Float.parseFloat(value.toString()));
                            } catch(NumberFormatException e) {
                                JOptionPane.showMessageDialog(MainWindow.this , "Неправильний формат числа !\n" + 
                                    e.getMessage(), "Помилка !", JOptionPane.ERROR_MESSAGE);
                            } finally {   
                                break;
                            }    
                        case 5: 
                            try {
                                myData.get(row).setPower(Integer.parseInt(value.toString())); 
                            } catch(NumberFormatException e) {
                                JOptionPane.showMessageDialog(MainWindow.this , "Неправильний формат числа !\n" + 
                                    e.getMessage(), "Помилка !", JOptionPane.ERROR_MESSAGE);
                            } finally {   
                                break;
                            }    
                    }
		}
		
	}

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        super("Курсова робота: ООП");
        myTableModel = new MyTableModel();
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        addButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        sortMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cheapestMenuItem = new javax.swing.JMenuItem();
        samePriceMenuItem = new javax.swing.JMenuItem();
        priceOutMenuItem = new javax.swing.JMenuItem();
        minMaxMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        myTable.setModel(myTableModel);
        jScrollPane1.setViewportView(myTable);

        jToolBar1.setRollover(true);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/taras_grynchuk/oop/forms/Add.png"))); // NOI18N
        addButton.setText("Додати");
        addButton.setFocusable(false);
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addButton);

        delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/taras_grynchuk/oop/forms/Delete.png"))); // NOI18N
        delButton.setText("Видалити");
        delButton.setFocusable(false);
        delButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(delButton);
        jToolBar1.add(jSeparator1);

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/taras_grynchuk/oop/forms/Up.png"))); // NOI18N
        upButton.setText("Вгору");
        upButton.setFocusable(false);
        upButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(upButton);

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/taras_grynchuk/oop/forms/Down.png"))); // NOI18N
        downButton.setText("Вниз");
        downButton.setFocusable(false);
        downButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(downButton);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Файл");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Імпорт ...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Експорт ...");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Вихід");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Дії");

        sortMenuItem.setMnemonic('t');
        sortMenuItem.setText("Сортувати за потужністю");
        sortMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(sortMenuItem);
        editMenu.add(jSeparator2);

        cheapestMenuItem.setMnemonic('y');
        cheapestMenuItem.setText("Найдешевша та найменш потужна");
        cheapestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cheapestMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cheapestMenuItem);

        samePriceMenuItem.setMnemonic('p');
        samePriceMenuItem.setText("Марки з одинаковою ціною та різними кольорами");
        samePriceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samePriceMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(samePriceMenuItem);

        priceOutMenuItem.setMnemonic('d');
        priceOutMenuItem.setText("Марки, ціна яких не входить в задані межі");
        priceOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceOutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(priceOutMenuItem);

        minMaxMenuItem.setText("Найпотужніша та найдешевша за кольором в кожній марці");
        minMaxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minMaxMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(minMaxMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Допомога");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Довідка");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Про програму");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        formWindowClosing(null);
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    //додавання нового рядка
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        myTableModel.myData.add(new Car());
        myTable.revalidate();
        
    }//GEN-LAST:event_addButtonActionPerformed
    
    //видалення рядка
    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        // TODO add your handling code here:
        int[] rows =  myTable.getSelectedRows();
        for(int i = rows.length - 1;  i >= 0; i--) 
            if(rows[i] < myTableModel.myData.size())
                myTableModel.myData.remove(rows[i]);
        myTable.revalidate();
    }//GEN-LAST:event_delButtonActionPerformed

    //перемістити рядок вгору
    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        // TODO add your handling code here:
        int row = myTable.getSelectedRow();
        if((row >= myTableModel.myData.size()) || (row < 0)) return;
        if(myTableModel.myData.size() < 2) return;
        
        int newRow = row - 1;
        if(newRow == -1) newRow = myTableModel.myData.size() - 1;
        
        Collections.swap(myTableModel.myData, row, newRow);
        myTable.revalidate();
        myTable.repaint();
        myTable.setRowSelectionInterval(newRow, newRow);
    }//GEN-LAST:event_upButtonActionPerformed

    //перемістити рядок вниз
    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        // TODO add your handling code here:
        int row = myTable.getSelectedRow();
        if((row >= myTableModel.myData.size()) || (row < 0)) return;
        if(myTableModel.myData.size() < 2) return;
        
        int newRow = row + 1;
        if(newRow == myTableModel.myData.size()) newRow = 0;
        
        Collections.swap(myTableModel.myData, row, newRow);
        myTable.revalidate();
        myTable.repaint();
        myTable.setRowSelectionInterval(newRow, newRow);        
    }//GEN-LAST:event_downButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try {
            saveToSerFile(myTableModel.myData);
        } catch(Exception e) {
            e.printStackTrace();
        }    
    }//GEN-LAST:event_formWindowClosing

    private void sortMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortMenuItemActionPerformed
        // TODO add your handling code here:
        myTableModel.myData.sort();
        myTable.revalidate();
        myTable.repaint();
    }//GEN-LAST:event_sortMenuItemActionPerformed

    private void cheapestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cheapestMenuItemActionPerformed
        // TODO add your handling code here:
        if(isDataEmpty()) return;
        CheapestForm.open(myTableModel.myData);
    }//GEN-LAST:event_cheapestMenuItemActionPerformed

    private void samePriceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samePriceMenuItemActionPerformed
        // TODO add your handling code here:
        if(isDataEmpty()) return;
        SamePriceForm.open(myTableModel.myData);
    }//GEN-LAST:event_samePriceMenuItemActionPerformed

    private void priceOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceOutMenuItemActionPerformed
        // TODO add your handling code here:
        if(isDataEmpty()) return;
        PriceOutOfBoundsForm.open(myTableModel.myData);
    }//GEN-LAST:event_priceOutMenuItemActionPerformed

    private void minMaxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minMaxMenuItemActionPerformed
        // TODO add your handling code here:
        if(isDataEmpty()) return;
        MinMaxForm.open(myTableModel.myData);
    }//GEN-LAST:event_minMaxMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
          JFileChooser saveFile = new JFileChooser();
          FileNameExtensionFilter filter = new FileNameExtensionFilter(
          "Текстові файли (*.txt)", "txt");
          saveFile.setFileFilter(filter);          
          if(saveFile.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
              File file = saveFile.getSelectedFile();
              String fileName = file.getAbsolutePath();
              if(file.getName().toLowerCase().indexOf(".txt") == -1)
                  fileName += ".txt";
              
              try {
                    exportToTextFile(myTableModel.myData, fileName);
                    JOptionPane.showMessageDialog(this, fileName, "Файл збережено !", JOptionPane.OK_OPTION);
                    
              } catch(Exception e) {
                    JOptionPane.showMessageDialog(this, "Помилка збереження файлу !\n" +
                            fileName + "\n" +
                            e.getMessage(), "Помилка !", JOptionPane.ERROR_MESSAGE);                
              }                
          }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
          JFileChooser openFile = new JFileChooser();
          FileNameExtensionFilter filter = new FileNameExtensionFilter(
          "Текстові файли (*.txt)", "txt");
          openFile.setFileFilter(filter);          
          if(openFile.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
              File file = openFile.getSelectedFile();
              String fileName = file.getAbsolutePath();
              try {
                    importFromTextFile(myTableModel.myData, fileName);
                    myTable.revalidate();
                    myTable.repaint();                    
                    JOptionPane.showMessageDialog(this, fileName, "Файл імпортовано !", JOptionPane.OK_OPTION);
                    
              } catch(Exception e) {
                    JOptionPane.showMessageDialog(this, "Помилка відкриття файлу !\n" +
                            fileName + "\n", "Помилка !", JOptionPane.ERROR_MESSAGE);                
              }                
          }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        AboutBox.main(null);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
        // TODO add your handling code here:
        Desktop dt = Desktop.getDesktop();
        try {
            dt.open(new File("ReadMe.mht"));
        } catch(Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Помилка відкриття файлу довідки !", "Помилка !", JOptionPane.ERROR_MESSAGE);            
        }    
    }//GEN-LAST:event_contentsMenuItemActionPerformed
    
    private boolean isDataEmpty() {
        if(myTableModel.myData.size() == 0) {
            JOptionPane.showMessageDialog(this, "Список пустий !", "Увага !", JOptionPane.WARNING_MESSAGE);
            return true;
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addButton;
    private javax.swing.JMenuItem cheapestMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JButton delButton;
    private javax.swing.JButton downButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem minMaxMenuItem;
    private javax.swing.JTable myTable;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem priceOutMenuItem;
    private javax.swing.JMenuItem samePriceMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem sortMenuItem;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

}
